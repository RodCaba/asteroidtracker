{"version":3,"sources":["assets/textures/8k_earth_daymap.jpg","assets/textures/8k_earth_clouds.jpg","assets/textures/8k_earth_normal_map.jpg","assets/textures/8k_earth_specular_map.jpg","assets/textures/2k_haumea_fictional.jpg","assets/textures/4k_ceres_fictional.jpg","assets/textures/4k_eris_fictional.jpg","assets/textures/4k_makemake_fictional.jpg","components/earth/index.jsx","components/topSection/index.jsx","components/datePicker/getData.jsx","components/datePicker/index.jsx","components/descriptionCards/index.jsx","components/asteroids/index.jsx","components/controls/index.jsx","components/descriptionCards/informativeCard.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Earth","useLoader","TextureLoader","EarthDayMap","EarthNormalMap","EarthSpecularMap","EarthCloudsMap","colorMap","normalMap","specularMap","cloudsMap","earthRef","useRef","cloudsRef","useFrame","elapsedTime","clock","getElapsedTime","current","rotation","y","color","position","intensity","Stars","radius","depth","count","factor","saturation","fade","ref","args","map","opacity","depthWrite","transparent","side","THREE","metalness","roughness","TopSectionContainer","styled","div","Title","h1","SubTitle","h2","TopSection","props","dataFetched","GetDataButton","useState","buttonPress","handleButtonPress","Button","onClick","initialDateApi","Intl","DateTimeFormat","format","initialDate","endDateApi","endDate","fetchData","size","type","DatePickerDiv","DatePicker","Date","setInitialDate","finalDate","setFinalDate","Stack","direction","spacing","alignItems","LocalizationProvider","dateAdapter","AdapterDateFns","DesktopDatePicker","label","value","onChange","newInitialDate","renderInput","params","TextField","newFinalDate","startDate","DescriptionCardDiv","DescriptiveCardDiv","className","Box","component","sx","display","mx","transform","Card","CardContent","Typography","variant","List","ListItem","ListItemText","primary","CardActions","Asteroids","numberOfPlanets","data","planets","length","x_initialArray","planet","x","v_initialArray","v","masses","m","xInitial","tf","vInitial","G","pos","setPos","dtTensor","useMemo","dt","compute","useCallback","a","unstackedX","accelerations","Array","fill","i","iX","j","jX","vector","r","force","mul","add","sub","calcA","newX","newV","array","then","newPos","useEffect","requestAnimationFrame","asteroidRef","HaumeaMap","CeresMap","ErisMap","MakeMakeMap","haumeaMap","ceresMap","erisMap","makemakeMap","xPos","asteroidMap","randomAsteroidMap","key","e","zoomToView","object","selectedAsteroidIndex","Math","min","attach","Controls","zoom","focus","look","camera","useThree","state","gl","controls","CameraControls","domElement","delta","set","z","lerp","updateProjectionMatrix","setLookAt","update","install","InformativeCard","name","secondary","dateForCard","diameterForCard","missDistanceForCard","velocityForCard","backToSpaceClick","CanvasContainer","darkTheme","createTheme","palette","mode","App","dataParsed","getDataParsed","dataFetchedStatus","fetch","res","json","axios","url","method","console","log","catch","err","get","setTimeout","dataJSON","setZoom","setFocus","asteroidIndex","setAsteroidIndex","ThemeProvider","theme","fallback","focusRef","index","OrbitControls","enableZoom","enablePan","enableRotate","zoomSpeed","panSpeed","rotateSpeed","Loader","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.010a7816.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/8k_earth_daymap.45ae6884.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8k_earth_clouds.bb0ab696.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8k_earth_normal_map.b2b5477e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8k_earth_specular_map.c1b24d36.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2k_haumea_fictional.11888d39.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4k_ceres_fictional.45a7cc66.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4k_eris_fictional.d09af55d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4k_makemake_fictional.220997ea.jpg\";","import React, { useRef } from \"react\";\r\nimport EarthDayMap from \"../../assets/textures/8k_earth_daymap.jpg\"\r\nimport EarthCloudsMap from \"../../assets/textures/8k_earth_clouds.jpg\"\r\nimport EarthNormalMap from \"../../assets/textures/8k_earth_normal_map.jpg\"\r\nimport EarthSpecularMap from \"../../assets/textures/8k_earth_specular_map.jpg\"\r\nimport { useFrame, useLoader } from \"@react-three/fiber\";\r\nimport { TextureLoader } from \"three\";\r\nimport { Stars } from \"@react-three/drei\";\r\nimport * as THREE from \"three\";\r\n\r\nexport function Earth(){\r\n\r\n    const [colorMap, normalMap, specularMap, cloudsMap] = useLoader(TextureLoader, \r\n        [EarthDayMap, EarthNormalMap, EarthSpecularMap, EarthCloudsMap]);\r\n\r\n    const earthRef = useRef();\r\n    const cloudsRef = useRef();\r\n    \r\n    useFrame(({ clock }) => {\r\n        const elapsedTime = clock.getElapsedTime();\r\n        earthRef.current.rotation.y = elapsedTime / 6;\r\n        cloudsRef.current.rotation.y = elapsedTime / 6;\r\n    })\r\n\r\n\r\n    return <>\r\n        <pointLight \r\n        color=\"#f6f3ea\"\r\n        position={[2, 0, 5]}\r\n        intensity={1.2}\r\n        />\r\n        <Stars \r\n        radius={300}\r\n        depth={60}\r\n        count={8000}\r\n        factor={7}\r\n        saturation={0}\r\n        fade={true}\r\n        />\r\n        <mesh ref={cloudsRef} position={[0, 0, 2.5]}>\r\n            <sphereGeometry \r\n            args={[1.005, 32, 32]}\r\n            />\r\n            <meshPhongMaterial \r\n            map={cloudsMap}\r\n            opacity={0.4}\r\n            depthWrite={true}\r\n            transparent={true}\r\n            side={THREE.DoubleSide}\r\n            />\r\n        </mesh>\r\n        <mesh ref={earthRef} position={[0, 0, 2.5]}>\r\n            <sphereGeometry \r\n            args={[1, 32, 32]}\r\n            />\r\n            <meshPhongMaterial\r\n            specularMap={specularMap} \r\n            />\r\n            <meshStandardMaterial \r\n            map={colorMap}\r\n            normalMap={normalMap}\r\n            metalness={0.4}\r\n            roughness={0.7}\r\n            />\r\n            \r\n        </mesh>\r\n    </>;\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TopSectionContainer = styled.div`\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    text-align: center;\r\n    margin-top: 50px;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n    margin: 0;\r\n    color: #fff;\r\n    font-weight: 700;\r\n    font-size: 35px;\r\n`\r\nconst SubTitle = styled.h2`\r\n    margin: 0;\r\n    color: #fff;\r\n    font-weight: 500;\r\n    font-size: 20px;\r\n`\r\n\r\nexport function TopSection(props){\r\n    return <TopSectionContainer>\r\n        <Title>Hazardous Asteroid Tracker</Title>\r\n        {props.dataFetched &&\r\n            <SubTitle>Refresh the page to select new dates</SubTitle>\r\n        }\r\n    </TopSectionContainer>\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Button } from \"@mui/material\";\r\nimport ReactLoading from \"react-loading\"\r\nexport function GetDataButton(props){\r\n\r\n    const [buttonPress, handleButtonPress] = useState(false);\r\n    \r\n    function fetchData(){\r\n        const initialDateApi = new Intl.DateTimeFormat(\"az\").format(props.initialDate);\r\n        const endDateApi = new Intl.DateTimeFormat(\"az\").format(props.endDate);\r\n        props.fetchData(initialDateApi, endDateApi);\r\n        handleButtonPress(true);\r\n    }\r\n\r\n    return <>\r\n    <Button onClick={fetchData} size=\"large\">\r\n        Go!\r\n    </Button>\r\n    {buttonPress &&\r\n        <ReactLoading \r\n        type=\"bars\"\r\n        />\r\n    }\r\n    </>\r\n}","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\"\r\nimport { LocalizationProvider } from \"@mui/lab\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\"\r\nimport { DesktopDatePicker } from \"@mui/lab\";\r\nimport { TextField } from \"@mui/material\";\r\nimport { GetDataButton } from \"./getData\";\r\nimport { Stack } from \"@mui/material\";\r\n\r\nconst DatePickerDiv = styled.div`\r\n\r\n`;\r\n\r\nexport function DatePicker(props){\r\n    const [initialDate, setInitialDate] = useState(new Date());\r\n    const [finalDate, setFinalDate] = useState(new Date());\r\n\r\n    const changeInitialDate = (newInitialDate) => {\r\n        setInitialDate(newInitialDate);\r\n    }\r\n\r\n    const changeFinalDate = (newFinalDate) => {\r\n        setFinalDate(newFinalDate);\r\n    }\r\n\r\n    function fetchData(startDate, endDate){\r\n        props.fetchData(startDate, endDate);\r\n    }\r\n\r\n\r\n    return <DatePickerDiv>\r\n        <Stack direction=\"row\" spacing={2} alignItems=\"center\">\r\n        <Stack spacing={2}>\r\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n            <DesktopDatePicker \r\n            label=\"Select an starting date\"\r\n            value={initialDate}\r\n            onChange={changeInitialDate}\r\n            renderInput={(params) => <TextField {...params}/>}\r\n            />\r\n\r\n            <DesktopDatePicker \r\n            label=\"Select a final date\"\r\n            value={finalDate}\r\n            onChange={changeFinalDate}\r\n            renderInput={(params) => <TextField {...params} />}\r\n            />\r\n        </LocalizationProvider>\r\n        </Stack>\r\n        <GetDataButton\r\n        fetchData = {fetchData} \r\n        initialDate = {initialDate}\r\n        endDate = {finalDate}\r\n        />\r\n        </Stack>\r\n    </DatePickerDiv>\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Card from \"@mui/material/Card\"\r\nimport CardActions from \"@mui/material/CardActions\"\r\nimport CardContent from \"@mui/material/CardContent\"\r\nimport { List, ListItem, ListItemText, Typography } from \"@mui/material\";\r\nimport Box from \"@mui/material/Box\"\r\nimport { DatePicker } from \"../datePicker\";\r\nimport { Stack } from \"@mui/material\";\r\nimport \"./descriptionCards.css\"\r\n\r\nconst DescriptionCardDiv = styled.div`\r\n`;\r\n\r\nexport function DescriptiveCardDiv(props){\r\n\r\n    function fetchData(startDate, endDate){\r\n        props.fetchData(startDate, endDate);\r\n    }\r\n\r\n\r\n    return <DescriptionCardDiv className=\"descriptionCardDiv\">\r\n        <Box\r\n        component=\"span\"\r\n        sx={{display: \"inline-block\", mx: \"2px\", transform: \"scale(0.8)\", opacity: \"0.7\"}}\r\n        >\r\n        <Card>\r\n            <Stack spacing={2}>\r\n                <CardContent>\r\n                    <Typography variant=\"h4\" className=\"headerDescription\" >\r\n                    Welcome astronaut! \r\n                    </Typography>\r\n                    <Typography variant=\"body1\">\r\n                        Each day potentially hazardous asteroids are passing through earth. \r\n                        With this graphical simulation of NASA API's information we can keep track on them.\r\n                    </Typography>\r\n                    <List>\r\n                        <ListItem>\r\n                            <ListItemText \r\n                            primary=\"1. Select a date period of 5 days maximum.\"\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemText \r\n                            primary=\"2. Some hazardous asteroids would appear on the screen.\"\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemText \r\n                            primary=\"3. Click on them to get more information.\"\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemText \r\n                            primary=\"4. You can drag the mouse and wheel to look over space.\"\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Note: The aspect ratio and material of each asteroids are simulated for user experience purposes. E.g. Keeping actual\r\n                        sizes would make the asteroids not visible on the screen. \r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <DatePicker\r\n                    fetchData = {fetchData} \r\n                    />\r\n                </CardActions>\r\n            </Stack>\r\n        </Card>\r\n        </Box>\r\n    </DescriptionCardDiv>\r\n\r\n}","import React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\"\r\nimport { useFrame, useLoader } from \"@react-three/fiber\";\r\nimport { TextureLoader } from \"three\";\r\nimport HaumeaMap from \"../../assets/textures/2k_haumea_fictional.jpg\"\r\nimport CeresMap from \"../../assets/textures/4k_ceres_fictional.jpg\"\r\nimport ErisMap from \"../../assets/textures/4k_eris_fictional.jpg\"\r\nimport MakeMakeMap from \"../../assets/textures/4k_makemake_fictional.jpg\"\r\n\r\n\r\n\r\nexport default function Asteroids(props){  \r\n\r\n    //Get total number of asteroids in the array\r\n    const numberOfPlanets = props.data.planets.length;\r\n\r\n    //Get the initial position of each asteroid \r\n    const x_initialArray = props.data.planets.map(planet => planet.x);\r\n    //Get initial velocity of each asteroid\r\n    const v_initialArray = props.data.planets.map(planet => planet.v);\r\n    //Get mass of asteroids\r\n    const masses = props.data.planets.map(planet => planet.m)\r\n    \r\n    //Make 2d tensors for position and velocity\r\n    const xInitial = tf.tensor2d(x_initialArray, [numberOfPlanets, 3]);\r\n    const vInitial = tf.tensor2d(v_initialArray, [numberOfPlanets, 3]);\r\n    \r\n    //Escalar tensor of G\r\n    const G = tf.scalar(props.data.G);\r\n\r\n    const [pos, setPos] = useState(x_initialArray);\r\n\r\n    // Not rerender as soon as the frame\r\n    const x = useRef(xInitial);\r\n    const v = useRef(vInitial);\r\n\r\n    const dtTensor = useMemo(() => tf.scalar(props.dt), [props.dt])\r\n\r\n    const compute = useCallback(() => {\r\n        const [newX, newV] = tf.tidy(() => {\r\n            const a = calcA(x.current);\r\n            //Determine new Pos\r\n            const newX = x.current.add(tf.mul(v.current, dtTensor));\r\n            const newV = v.current.add(tf.mul(a, dtTensor));\r\n            return[newX, newV];\r\n        })\r\n        tf.dispose([x.current, v.current]);\r\n        //Replace\r\n        x.current = newX;\r\n        v.current = newV;\r\n\r\n        newX.array().then(newPos => {\r\n            setPos(newPos);\r\n        });\r\n        //Add dependencies of compute function\r\n        // eslint-disable-next-line\r\n    }, [x, v, dtTensor])\r\n\r\n    useEffect(() => {\r\n        requestAnimationFrame(() => {\r\n            //Calls compute function on each frame \r\n            compute();\r\n        })\r\n    }, [pos, compute]);\r\n\r\n    // Function to calculate acceleration by position\r\n    function calcA(x) {\r\n        //unstack pos tensor\r\n        const unstackedX = tf.unstack(x);\r\n        //Save acc in 1d tensor\r\n        const accelerations = Array(numberOfPlanets).fill(tf.tensor1d([0,0,0]));\r\n\r\n        for(let i = 0; i < numberOfPlanets; i++){\r\n            const iX = unstackedX[i];\r\n            for(let j = i + 1; j < numberOfPlanets; j++){\r\n                const jX = unstackedX[j];\r\n                const vector = tf.sub(jX, iX);\r\n                const r = tf.norm(vector);\r\n\r\n                const force = G.mul(masses[i])\r\n                                .mul(masses[j])\r\n                                .div(tf.pow(r, 3))\r\n                                .mul(vector);\r\n                accelerations[i] = accelerations[i].add(force);\r\n                accelerations[j] = accelerations[j].sub(force)\r\n            }\r\n\r\n            accelerations[i] = accelerations[i].div(masses[i]);\r\n        }\r\n\r\n        //Transform to 2d vectors\r\n        return tf.stack(accelerations);\r\n    }\r\n\r\n    const asteroidRef = useRef();\r\n\r\n    useFrame(({clock}) => {\r\n        const elapsedTime = clock.getElapsedTime();\r\n        asteroidRef.current.rotation.y = elapsedTime / 3;\r\n    })\r\n\r\n    const [haumeaMap, ceresMap, erisMap, makemakeMap] = useLoader(TextureLoader,\r\n        [HaumeaMap, CeresMap, ErisMap, MakeMakeMap]);\r\n\r\n\r\n    function randomAsteroidMap(map){\r\n        switch (map) {\r\n            case 0:\r\n                return haumeaMap;\r\n            case 1:\r\n                return ceresMap;\r\n            case 2:\r\n                return erisMap;\r\n            case 3:\r\n                return makemakeMap;\r\n            default:\r\n                return haumeaMap;\r\n        } \r\n    }\r\n\r\n    return <group>\r\n        {pos.map((xPos, i) => {\r\n            let asteroidMap = randomAsteroidMap(props.data.planets[i].map);\r\n            return <mesh key={i} \r\n                        position={i === 0 ? [0,0,2.5] : xPos} \r\n                        ref={asteroidRef}\r\n                        onClick={(e) => {\r\n                            props.zoomToView(e.object.position)\r\n                            props.selectedAsteroidIndex(i);\r\n                        }\r\n                        }\r\n                        >\r\n                {/* <Text>\r\n                    {props.data.planets[i].name}\r\n                </Text> */}\r\n                <sphereBufferGeometry \r\n                args={i === 0 ? [0.2, 30, 30] :[Math.min(props.data.planets[i].r * 2000, 0.1), 30, 30]}\r\n                attach=\"geometry\"\r\n                />\r\n                <meshStandardMaterial \r\n                map={asteroidMap}\r\n                metalness={0.2}\r\n                roughness={0.8}\r\n                attach=\"material\"\r\n                />\r\n            </mesh>\r\n        })}\r\n    </group>\r\n}","import * as THREE from \"three\";\r\nimport CameraControls from \"camera-controls\"\r\nimport { useFrame, useThree } from \"@react-three/fiber\";\r\nimport { useMemo } from \"react\";\r\n\r\nCameraControls.install({THREE});\r\n\r\nexport default function Controls({zoom, focus, pos = new THREE.Vector3(),\r\n                                look = new THREE.Vector3()}){\r\n\r\n    const camera = useThree((state) => state.camera);\r\n    const gl = useThree((state) => state.gl);\r\n    // eslint-disable-next-line\r\n    const controls = useMemo(() => new CameraControls(camera, gl.domElement), []);\r\n    return useFrame((state, delta) => {\r\n        zoom ? pos.set(focus.x, focus.y, focus.z + 0.5): pos.set(0,0,5);\r\n        zoom ? look.set(focus.x, focus.y, focus.z - 0.5): look.set(0,0,4);\r\n\r\n        state.camera.position.lerp(pos, 0.5);\r\n        state.camera.updateProjectionMatrix()\r\n\r\n        controls.setLookAt(state.camera.position.x, state.camera.position.y,\r\n                            state.camera.position.z, look.x, look.y, look.z, true);\r\n\r\n        return controls.update(delta);\r\n    })\r\n\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { Card, Stack, CardContent, Typography, CardActions, Button, List, ListItem, ListItemText } from \"@mui/material\";\r\n\r\nconst DescriptionCardDiv = styled.div`\r\n\r\n`;\r\n\r\nexport default function InformativeCard(props){\r\n\r\n    return <DescriptionCardDiv className=\"informativeCardDiv\">\r\n                <Box\r\n                    component=\"span\"\r\n                    sx={{display: \"inline-block\", mx: \"2px\", transform: \"scale(0.8)\", opacity: \"0.7\"}}\r\n                    >\r\n                    <Card>\r\n                        <Stack spacing={2}>\r\n                            <CardContent>\r\n                                <Typography variant=\"h4\">\r\n                                    {props.data.name}\r\n                                </Typography>\r\n\r\n                                <List>\r\n                                    <ListItem>\r\n                                        <ListItemText primary=\"Close approach date: \" secondary={props.data.dateForCard}/>\r\n                                    </ListItem>\r\n                                    <ListItem>\r\n                                        <ListItemText primary=\"Diameter in km: \" secondary={props.data.diameterForCard}/>\r\n                                    </ListItem>\r\n                                    <ListItem>\r\n                                        <ListItemText primary=\"Miss distance in km: \" secondary={props.data.missDistanceForCard}/>\r\n                                    </ListItem>\r\n                                    <ListItem>\r\n                                        <ListItemText primary=\"Speed in km/hr: \" secondary={props.data.velocityForCard}/>\r\n                                    </ListItem>\r\n                                </List>\r\n                            </CardContent>\r\n                            <CardActions>\r\n                                <Button onClick={props.backToSpaceClick} size=\"large\">\r\n                                    Back to space\r\n                                </Button>      \r\n                            </CardActions>\r\n                        </Stack>\r\n                    </Card>\r\n                    </Box>\r\n    </DescriptionCardDiv>\r\n}\r\n\r\n\r\n","import React, { Suspense, useState } from \"react\"\nimport './App.css';\nimport styled from \"styled-components\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { Earth } from \"./components/earth\";\nimport { TopSection } from \"./components/topSection\";\nimport { DescriptiveCardDiv } from \"./components/descriptionCards\";\nimport { createTheme } from \"@mui/material\";\nimport { ThemeProvider } from \"@mui/system\";\nimport { Loader } from \"@react-three/drei\";\nimport axios from \"axios\";\nimport Asteroids from \"./components/asteroids\"; \nimport Controls from \"./components/controls\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport InformativeCard from \"./components/descriptionCards/informativeCard\";\n\nconst CanvasContainer = styled.div`\n  width: 100%;\n  height: 100%;\n`;\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: \"dark\",\n  },\n});\n\n\n\nfunction App() {\n\n  const [dataParsed, getDataParsed] = useState({\n        planets: [\n        {\n            x: [\n                0,\n                0,\n                2.5\n              ],\n              v: [\n                -3.5174423541454e-7,\n                0.00000517762777222281,\n                0.00000222910220557907\n              ],\n              m: 0.002,\n              r: 1,\n              color: '#e4e80e',\n              map: 0\n        },\n        ],\n        \"G\": 2.95912208286e-4  \n      });\n\n  const [dataFetched, dataFetchedStatus] = useState(false);\n\n  \n  const fetchData = async(startDate, endDate) => {\n    const dataJSON = await fetch(`https://api.nasa.gov/neo/rest/v1/feed?start_date=${startDate}&end_date=${endDate}&api_key=DEMO_KEY`, {mode: 'cors'})\n                                .then(res => res.json())\n                                .then(data => {\n                                  axios({\n                                    url: \"/api\",\n                                    method: 'POST',\n                                    data: data\n                                  }).then(() => {\n                                    console.log(\"Data sent to server\");\n                                  }).catch(err => {\n                                    console.log(err);\n                                  });\n                                }).then(() => {\n                                  axios.get(\"/api\")\n                                        .then(res => {\n                                          getDataParsed(res.data);\n                                        })\n                                        .catch(err => {\n                                          console.log(err);\n                                        })\n                                }).then(() => {\n                                  setTimeout(() => {\n                                    dataHasFetched();\n                                  }, 3000)\n                                })\n    return dataJSON;\n  }\n\n  function dataHasFetched(){\n    dataFetchedStatus(true);\n  }\n\n  const [zoom, setZoom] = useState(false);\n  const [focus, setFocus] = useState({});\n  const [asteroidIndex, setAsteroidIndex] = useState(1);\n\n  function selectedAsteroidIndex(index){\n    setAsteroidIndex(index);\n  }\n\n  function backToSpaceClick(){\n    setZoom(false);\n  }\n\n  return <CanvasContainer>\n    <ThemeProvider \n    theme={darkTheme}>\n    <TopSection dataFetched = {dataFetched}/>\n    {!dataFetched &&\n    <DescriptiveCardDiv\n    fetchData = {fetchData} \n    />\n    }\n    {zoom &&\n      <InformativeCard \n      data = {dataParsed.planets[asteroidIndex]}\n      backToSpaceClick = {backToSpaceClick}\n      />\n    }\n    <Canvas camera={{position: [0,0,5]}}>\n      <Suspense fallback={null}>\n        <Earth\n        />\n        {dataFetched && \n        <Asteroids \n        data = {dataParsed}\n        dt = {0.1}\n        // eslint-disable-next-line\n        zoomToView ={(focusRef) => (setZoom(!zoom), setFocus(focusRef))}\n        zoom = {zoom}\n        selectedAsteroidIndex = {selectedAsteroidIndex}\n\n        />}\n        {\n          zoom &&\n          <Controls \n          zoom={zoom}\n          focus={focus}\n          />\n        }\n        \n        {\n          !zoom &&\n          <OrbitControls \n            enableZoom={true}\n            enablePan={true}\n            enableRotate={true}\n            zoomSpeed={0.6}\n            panSpeed={0.5}\n            rotateSpeed={0.4}\n        />}\n      </Suspense>\n    </Canvas>\n    <Loader />\n    </ThemeProvider>\n  </CanvasContainer>\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}